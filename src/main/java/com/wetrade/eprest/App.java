/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.wetrade.eprest;

import java.nio.file.Path;
import java.nio.file.Paths;

import com.google.gson.Gson;
import com.wetrade.common.FabricProxyConfig;
import com.wetrade.common.FabricProxyException;
import com.wetrade.eprest.controllers.FinanceRequestController;
import com.wetrade.eprest.controllers.PurchaseOrderController;
import com.wetrade.eprest.controllers.ShipmentController;

import spark.Spark;

public class App {
    public static void main(String[] args) {
        PurchaseOrderService purchaseOrderService;
        FinanceRequestService financeRequestService;
        ShipmentService shipmentService;
        try {
            Path walletPath = Paths.get("/Users/liamg/dev/WeTradePOC/eprest/src/main/resources/wallet");
            Path connectionProfilePath = Paths.get("/Users/liamg/dev/WeTradePOC/eprest/src/main/resources/local_fabric_connection.json");
            String channelName = "mychannel";
            String contractName = "contract";
            String org = "Org1";
            FabricProxyConfig config = new FabricProxyConfig(walletPath, connectionProfilePath, channelName, contractName, org);
            purchaseOrderService = new PurchaseOrderServiceFabricImpl(config);
            financeRequestService = new FinanceRequestServiceFabricImpl(config);
            shipmentService = new ShipmentServiceFabricImpl(config);
        } catch (FabricProxyException exception) {
            exception.printStackTrace();
            System.exit(1);
            return;
        }

        new PurchaseOrderController(purchaseOrderService);
        new FinanceRequestController(financeRequestService);
        new ShipmentController(shipmentService);

        Spark.internalServerError((req, res) -> {
            res.type("application/json");
            Gson gson = new Gson();
            return gson.toJson(new BaseResponse(ResponseStatus.ERROR));
        });
    }
}
